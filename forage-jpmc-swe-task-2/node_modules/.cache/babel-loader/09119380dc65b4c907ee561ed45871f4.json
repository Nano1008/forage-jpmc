{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\95841\\\\Desktop\\\\forage-jpmc-swe-task-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\95841\\\\Desktop\\\\forage-jpmc-swe-task-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\r\n * The datafeed server returns an array of ServerRespond with 2 stocks.\r\n * We do not have to manipulate the ServerRespond for the purpose of this task.\r\n */\nvar DataStreamer = /*#__PURE__*/function () {\n  function DataStreamer() {\n    _classCallCheck(this, DataStreamer);\n  }\n\n  _createClass(DataStreamer, null, [{\n    key: \"getData\",\n    // The url where datafeed server is listening\n\n    /**\r\n     * Send request to the datafeed server and executes callback function on success\r\n     * @param callback callback function that takes JSON object as its argument\r\n     */\n    value: function getData(callback) {\n      var request = new XMLHttpRequest();\n      request.open('GET', DataStreamer.API_URL, false);\n\n      request.onload = function () {\n        if (request.status === 200) {\n          callback(JSON.parse(request.responseText));\n        } else {\n          alert('Request failed');\n        }\n      };\n\n      request.send();\n    }\n  }]);\n\n  return DataStreamer;\n}();\n\nDataStreamer.API_URL = 'http://localhost:8080/query?id=1';\nexport default DataStreamer;","map":{"version":3,"names":["DataStreamer","callback","request","XMLHttpRequest","open","API_URL","onload","status","JSON","parse","responseText","alert","send"],"sources":["C:/Users/95841/Desktop/forage-jpmc-swe-task-2/src/DataStreamer.ts"],"sourcesContent":["export interface Order {\r\n  price: Number,\r\n  size: Number,\r\n}\r\n/**\r\n * The datafeed server returns an array of ServerRespond with 2 stocks.\r\n * We do not have to manipulate the ServerRespond for the purpose of this task.\r\n */\r\nexport interface ServerRespond {\r\n  stock: string,\r\n  top_bid: Order,\r\n  top_ask: Order,\r\n  timestamp: Date,\r\n}\r\n\r\nclass DataStreamer {\r\n  // The url where datafeed server is listening\r\n  static API_URL: string = 'http://localhost:8080/query?id=1';\r\n\r\n  /**\r\n   * Send request to the datafeed server and executes callback function on success\r\n   * @param callback callback function that takes JSON object as its argument\r\n   */\r\n  static getData(callback: (data: ServerRespond[]) => void): void {\r\n    const request = new XMLHttpRequest();\r\n    request.open('GET', DataStreamer.API_URL, false);\r\n\r\n    request.onload = () => {\r\n      if (request.status === 200) {\r\n        callback(JSON.parse(request.responseText));\r\n      } else {\r\n        alert ('Request failed');\r\n      }\r\n    }\r\n\r\n    request.send();\r\n  }\r\n}\r\n\r\nexport default DataStreamer;"],"mappings":";;;AAIA;AACA;AACA;AACA;IAQMA,Y;;;;;;;IACJ;;IAGA;AACF;AACA;AACA;4BACiBC,Q,EAAiD;MAC9D,IAAMC,OAAO,GAAG,IAAIC,cAAJ,EAAhB;MACAD,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoBJ,YAAY,CAACK,OAAjC,EAA0C,KAA1C;;MAEAH,OAAO,CAACI,MAAR,GAAiB,YAAM;QACrB,IAAIJ,OAAO,CAACK,MAAR,KAAmB,GAAvB,EAA4B;UAC1BN,QAAQ,CAACO,IAAI,CAACC,KAAL,CAAWP,OAAO,CAACQ,YAAnB,CAAD,CAAR;QACD,CAFD,MAEO;UACLC,KAAK,CAAE,gBAAF,CAAL;QACD;MACF,CAND;;MAQAT,OAAO,CAACU,IAAR;IACD;;;;;;AArBGZ,Y,CAEGK,O,GAAkB,kC;AAsB3B,eAAeL,YAAf"},"metadata":{},"sourceType":"module"}