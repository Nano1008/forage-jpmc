{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\95841\\\\Desktop\\\\forage-jpmc-swe-task-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\95841\\\\Desktop\\\\forage-jpmc-swe-task-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\95841\\\\Desktop\\\\forage-jpmc-swe-task-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\95841\\\\Desktop\\\\forage-jpmc-swe-task-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\95841\\\\Desktop\\\\forage-jpmc-swe-task-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport './Graph.css';\n/**\r\n * Props declaration for <Graph />\r\n */\n\n/**\r\n * React component that renders Perspective based on data\r\n * parsed from its parent through data property.\r\n */\nvar Graph = /*#__PURE__*/function (_Component) {\n  _inherits(Graph, _Component);\n\n  function Graph() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Graph);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Graph)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.table = void 0;\n    return _this;\n  }\n\n  _createClass(Graph, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement('perspective-viewer');\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Get element to attach the table from the DOM.\n      var elem = document.getElementsByTagName('perspective-viewer')[0];\n      elem.setAttribute(\"view\", \"y_line\");\n      elem.setAttribute(\"column-pivots\", '[\"stock\"]');\n      elem.setAttribute(\"row-pivots\", '[\"timestamp\"]');\n      elem.setAttribute(\"columns\", '[\"top_ask_price\"]');\n      elem.setAttribute(\"aggregates\", \"\\n    {\\\"stock\\\": \\\"distinct count\\\",\\n    \\\"top_ask_price\\\": \\\"avg\\\",\\n    \\\"top_bid_price\\\": \\\"avg\\\",\\n    \\\"timestamp\\\": \\\"distinct count\\\",\\n  }\");\n      var schema = {\n        stock: 'string',\n        top_ask_price: 'float',\n        top_bid_price: 'float',\n        timestamp: 'date'\n      };\n\n      if (window.perspective && window.perspective.worker()) {\n        this.table = window.perspective.worker().table(schema);\n      }\n\n      if (this.table) {\n        // Load the `table` in the `<perspective-viewer>` DOM reference.\n        // Add more Perspective configurations here.\n        elem.load(this.table);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // Everytime the data props is updated, insert the data into Perspective table\n      if (this.table) {\n        // As part of the task, you need to fix the way we update the data props to\n        // avoid inserting duplicated entries into Perspective table again.\n        this.table.update(this.props.data.map(function (el) {\n          // Format the data from ServerRespond to the schema\n          return {\n            stock: el.stock,\n            top_ask_price: el.top_ask && el.top_ask.price || 0,\n            top_bid_price: el.top_bid && el.top_bid.price || 0,\n            timestamp: el.timestamp\n          };\n        }));\n      }\n    }\n  }]);\n\n  return Graph;\n}(Component);\n\nexport default Graph;","map":{"version":3,"names":["React","Component","Graph","table","createElement","elem","document","getElementsByTagName","setAttribute","schema","stock","top_ask_price","top_bid_price","timestamp","window","perspective","worker","load","update","props","data","map","el","top_ask","price","top_bid"],"sources":["C:/Users/95841/Desktop/forage-jpmc-swe-task-2/src/Graph.tsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Table } from '@finos/perspective';\r\nimport { ServerRespond } from './DataStreamer';\r\nimport './Graph.css';\r\n\r\n/**\r\n * Props declaration for <Graph />\r\n */\r\ninterface IProps {\r\n  data: ServerRespond[],\r\n}\r\n\r\n/**\r\n * Perspective library adds load to HTMLElement prototype.\r\n * This interface acts as a wrapper for Typescript compiler.\r\n */\r\ninterface PerspectiveViewerElement extends HTMLElement{\r\n  load: (table: Table) => void,\r\n}\r\n\r\n/**\r\n * React component that renders Perspective based on data\r\n * parsed from its parent through data property.\r\n */\r\nclass Graph extends Component<IProps, {}> {\r\n  // Perspective table\r\n  table: Table | undefined;\r\n\r\n  render() {\r\n    return React.createElement('perspective-viewer');\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Get element to attach the table from the DOM.\r\n    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;\r\n\r\n    elem.setAttribute(\"view\", \"y_line\");\r\n    elem.setAttribute(\"column-pivots\", '[\"stock\"]');\r\n    elem.setAttribute(\"row-pivots\", '[\"timestamp\"]');\r\n    elem.setAttribute(\"columns\", '[\"top_ask_price\"]');\r\n    elem.setAttribute(\"aggregates\", `\r\n    {\"stock\": \"distinct count\",\r\n    \"top_ask_price\": \"avg\",\r\n    \"top_bid_price\": \"avg\",\r\n    \"timestamp\": \"distinct count\",\r\n  }`)\r\n\r\n    const schema = {\r\n      stock: 'string',\r\n      top_ask_price: 'float',\r\n      top_bid_price: 'float',\r\n      timestamp: 'date',\r\n    };\r\n\r\n    if (window.perspective && window.perspective.worker()) {\r\n      this.table = window.perspective.worker().table(schema);\r\n    }\r\n    if (this.table) {\r\n      // Load the `table` in the `<perspective-viewer>` DOM reference.\r\n\r\n      // Add more Perspective configurations here.\r\n      elem.load(this.table);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Everytime the data props is updated, insert the data into Perspective table\r\n    if (this.table) {\r\n      // As part of the task, you need to fix the way we update the data props to\r\n      // avoid inserting duplicated entries into Perspective table again.\r\n      this.table.update(this.props.data.map((el: any) => {\r\n        // Format the data from ServerRespond to the schema\r\n        return {\r\n          stock: el.stock,\r\n          top_ask_price: el.top_ask && el.top_ask.price || 0,\r\n          top_bid_price: el.top_bid && el.top_bid.price || 0,\r\n          timestamp: el.timestamp,\r\n        };\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAGA,OAAO,aAAP;AAEA;AACA;AACA;;AAaA;AACA;AACA;AACA;IACMC,K;;;;;;;;;;;;;;;UAEJC,K;;;;;;6BAES;MACP,OAAOH,KAAK,CAACI,aAAN,CAAoB,oBAApB,CAAP;IACD;;;wCAEmB;MAClB;MACA,IAAMC,IAAI,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,oBAA9B,EAAoD,CAApD,CAAb;MAEAF,IAAI,CAACG,YAAL,CAAkB,MAAlB,EAA0B,QAA1B;MACAH,IAAI,CAACG,YAAL,CAAkB,eAAlB,EAAmC,WAAnC;MACAH,IAAI,CAACG,YAAL,CAAkB,YAAlB,EAAgC,eAAhC;MACAH,IAAI,CAACG,YAAL,CAAkB,SAAlB,EAA6B,mBAA7B;MACAH,IAAI,CAACG,YAAL,CAAkB,YAAlB;MAOA,IAAMC,MAAM,GAAG;QACbC,KAAK,EAAE,QADM;QAEbC,aAAa,EAAE,OAFF;QAGbC,aAAa,EAAE,OAHF;QAIbC,SAAS,EAAE;MAJE,CAAf;;MAOA,IAAIC,MAAM,CAACC,WAAP,IAAsBD,MAAM,CAACC,WAAP,CAAmBC,MAAnB,EAA1B,EAAuD;QACrD,KAAKb,KAAL,GAAaW,MAAM,CAACC,WAAP,CAAmBC,MAAnB,GAA4Bb,KAA5B,CAAkCM,MAAlC,CAAb;MACD;;MACD,IAAI,KAAKN,KAAT,EAAgB;QACd;QAEA;QACAE,IAAI,CAACY,IAAL,CAAU,KAAKd,KAAf;MACD;IACF;;;yCAEoB;MACnB;MACA,IAAI,KAAKA,KAAT,EAAgB;QACd;QACA;QACA,KAAKA,KAAL,CAAWe,MAAX,CAAkB,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,GAAhB,CAAoB,UAACC,EAAD,EAAa;UACjD;UACA,OAAO;YACLZ,KAAK,EAAEY,EAAE,CAACZ,KADL;YAELC,aAAa,EAAEW,EAAE,CAACC,OAAH,IAAcD,EAAE,CAACC,OAAH,CAAWC,KAAzB,IAAkC,CAF5C;YAGLZ,aAAa,EAAEU,EAAE,CAACG,OAAH,IAAcH,EAAE,CAACG,OAAH,CAAWD,KAAzB,IAAkC,CAH5C;YAILX,SAAS,EAAES,EAAE,CAACT;UAJT,CAAP;QAMD,CARiB,CAAlB;MASD;IACF;;;;EAxDiBZ,S;;AA2DpB,eAAeC,KAAf"},"metadata":{},"sourceType":"module"}